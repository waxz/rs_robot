/* automatically generated by rust-bindgen 0.65.1 */

pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const MSG_STRUCT_MAX_FRAME_ID_LEN: u32 = 50;
pub type i8_t = ::std::os::raw::c_schar;
pub type u8_t = ::std::os::raw::c_uchar;
pub type i16_t = ::std::os::raw::c_short;
pub type u16_t = ::std::os::raw::c_ushort;
pub type i32_t = ::std::os::raw::c_int;
pub type u32_t = ::std::os::raw::c_uint;
pub type i64_t = ::std::os::raw::c_longlong;
pub type u64_t = ::std::os::raw::c_ulonglong;
pub type f32_t = f32;
pub type f64_t = f64;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ta_cfg_t {
    pub base: *mut ::std::os::raw::c_void,
    pub limit: *mut ::std::os::raw::c_void,
    pub max_blocks: usize,
    pub split_thresh: usize,
    pub alignment: usize,
}
#[test]
fn bindgen_test_layout_ta_cfg_t() {
    const UNINIT: ::std::mem::MaybeUninit<ta_cfg_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ta_cfg_t>(),
        40usize,
        concat!("Size of: ", stringify!(ta_cfg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ta_cfg_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ta_cfg_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ta_cfg_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).limit) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ta_cfg_t),
            "::",
            stringify!(limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_blocks) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ta_cfg_t),
            "::",
            stringify!(max_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).split_thresh) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ta_cfg_t),
            "::",
            stringify!(split_thresh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alignment) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ta_cfg_t),
            "::",
            stringify!(alignment)
        )
    );
}
extern "C" {
    pub fn ta_init(cfg: *const ta_cfg_t);
}
extern "C" {
    pub fn ta_alloc(cfg: *const ta_cfg_t, num: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ta_calloc(cfg: *const ta_cfg_t, num: usize, size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ta_getsize(cfg: *const ta_cfg_t, ptr: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    pub fn ta_realloc(
        cfg: *const ta_cfg_t,
        ptr: *mut ::std::os::raw::c_void,
        num: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ta_free(cfg: *const ta_cfg_t, ptr: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn ta_num_free(cfg: *const ta_cfg_t) -> usize;
}
extern "C" {
    pub fn ta_num_used(cfg: *const ta_cfg_t) -> usize;
}
extern "C" {
    pub fn ta_num_fresh(cfg: *const ta_cfg_t) -> usize;
}
extern "C" {
    pub fn ta_check(cfg: *const ta_cfg_t) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ChannelBuffer {
    pub buffer: *mut *mut ::std::os::raw::c_void,
    pub buffer_size: u32_t,
}
#[test]
fn bindgen_test_layout_ChannelBuffer() {
    const UNINIT: ::std::mem::MaybeUninit<ChannelBuffer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ChannelBuffer>(),
        16usize,
        concat!("Size of: ", stringify!(ChannelBuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<ChannelBuffer>(),
        8usize,
        concat!("Alignment of ", stringify!(ChannelBuffer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ChannelBuffer),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ChannelBuffer),
            "::",
            stringify!(buffer_size)
        )
    );
}
pub type ChannelBuffer_ptr = *mut ChannelBuffer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct message_handler_t {
    pub handler: *mut ::std::os::raw::c_void,
    #[doc = " crete ros node and subscriber and publisher from toml file\n \\param h\n \\param filename"]
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            h: *mut message_handler_t,
            filename: *const ::std::os::raw::c_char,
            cfg: *const ta_cfg_t,
        ) -> bool,
    >,
    #[doc = " close all resource\n \\param h"]
    pub close: ::std::option::Option<unsafe extern "C" fn(h: *mut message_handler_t)>,
    #[doc = " get ros::ok\n \\param h\n \\return"]
    pub is_ok: ::std::option::Option<unsafe extern "C" fn(h: *mut message_handler_t) -> bool>,
    #[doc = " read data from channel\n \\param h\n \\param channel_name\n \\return"]
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            h: *mut message_handler_t,
            channel_name: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " write data to channel\n \\param h\n \\param channel_name\n \\return"]
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            h: *mut message_handler_t,
            channel_name: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub write_data: ::std::option::Option<
        unsafe extern "C" fn(
            h: *mut message_handler_t,
            channel_name: *const ::std::os::raw::c_char,
            buffer: *mut *mut ::std::os::raw::c_void,
            buffer_size: u32_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub read_data: ::std::option::Option<
        unsafe extern "C" fn(
            h: *mut message_handler_t,
            channel_name: *const ::std::os::raw::c_char,
        ) -> ChannelBuffer_ptr,
    >,
}
#[test]
fn bindgen_test_layout_message_handler_t() {
    const UNINIT: ::std::mem::MaybeUninit<message_handler_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<message_handler_t>(),
        64usize,
        concat!("Size of: ", stringify!(message_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<message_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(message_handler_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handler) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(message_handler_t),
            "::",
            stringify!(handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(message_handler_t),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(message_handler_t),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_ok) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(message_handler_t),
            "::",
            stringify!(is_ok)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(message_handler_t),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(message_handler_t),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_data) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(message_handler_t),
            "::",
            stringify!(write_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_data) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(message_handler_t),
            "::",
            stringify!(read_data)
        )
    );
}
pub type message_handler_ptr_t = *mut message_handler_t;
extern "C" {
    pub fn ros_handler_create() -> message_handler_t;
}
extern "C" {
    pub fn dds_handler_create() -> message_handler_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MessageBase {
    pub type_name: *const ::std::os::raw::c_char,
    pub stamp: u64_t,
    pub base_size: u32_t,
    pub buffer_size: u32_t,
    pub full_size: u32_t,
    pub buffer: [u32_t; 1usize],
}
#[test]
fn bindgen_test_layout_MessageBase() {
    const UNINIT: ::std::mem::MaybeUninit<MessageBase> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MessageBase>(),
        32usize,
        concat!("Size of: ", stringify!(MessageBase))
    );
    assert_eq!(
        ::std::mem::align_of::<MessageBase>(),
        8usize,
        concat!("Alignment of ", stringify!(MessageBase))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MessageBase),
            "::",
            stringify!(type_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MessageBase),
            "::",
            stringify!(stamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MessageBase),
            "::",
            stringify!(base_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_size) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(MessageBase),
            "::",
            stringify!(buffer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).full_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MessageBase),
            "::",
            stringify!(full_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(MessageBase),
            "::",
            stringify!(buffer)
        )
    );
}
pub type MessageBasePtr = *mut MessageBase;
extern "C" {
    pub fn MessageBase_create() -> MessageBase;
}
extern "C" {
    pub fn MessageBase_allocate(size: u32_t, cfg: *mut ta_cfg_t) -> MessageBasePtr;
}
extern "C" {
    pub fn MessageBase_reallocate(
        size: u32_t,
        ptr: MessageBasePtr,
        cfg: *mut ta_cfg_t,
    ) -> MessageBasePtr;
}
extern "C" {
    pub fn MessageBaseT_getBuffer(ptr: MessageBasePtr) -> *mut u32_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Point {
    pub type_name: *mut ::std::os::raw::c_char,
    pub base_size: u32_t,
    pub buffer_size: u32_t,
    pub full_size: u32_t,
    pub x: f64_t,
    pub y: f64_t,
    pub z: f64_t,
}
#[test]
fn bindgen_test_layout_Point() {
    const UNINIT: ::std::mem::MaybeUninit<Point> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Point>(),
        48usize,
        concat!("Size of: ", stringify!(Point))
    );
    assert_eq!(
        ::std::mem::align_of::<Point>(),
        8usize,
        concat!("Alignment of ", stringify!(Point))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Point),
            "::",
            stringify!(type_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Point),
            "::",
            stringify!(base_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Point),
            "::",
            stringify!(buffer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).full_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Point),
            "::",
            stringify!(full_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(Point), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(Point), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(Point), "::", stringify!(z))
    );
}
pub type Point_ptr = *mut Point;
extern "C" {
    pub fn Point_create() -> Point;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Quaternion {
    pub type_name: *mut ::std::os::raw::c_char,
    pub base_size: u32_t,
    pub buffer_size: u32_t,
    pub full_size: u32_t,
    pub w: f64_t,
    pub x: f64_t,
    pub y: f64_t,
    pub z: f64_t,
}
#[test]
fn bindgen_test_layout_Quaternion() {
    const UNINIT: ::std::mem::MaybeUninit<Quaternion> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Quaternion>(),
        56usize,
        concat!("Size of: ", stringify!(Quaternion))
    );
    assert_eq!(
        ::std::mem::align_of::<Quaternion>(),
        8usize,
        concat!("Alignment of ", stringify!(Quaternion))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Quaternion),
            "::",
            stringify!(type_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Quaternion),
            "::",
            stringify!(base_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Quaternion),
            "::",
            stringify!(buffer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).full_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Quaternion),
            "::",
            stringify!(full_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Quaternion),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Quaternion),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Quaternion),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Quaternion),
            "::",
            stringify!(z)
        )
    );
}
pub type Quaternion_ptr = *mut Quaternion;
extern "C" {
    pub fn Quaternion_create() -> Quaternion;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Pose {
    pub type_name: *mut ::std::os::raw::c_char,
    pub base_size: u32_t,
    pub buffer_size: u32_t,
    pub full_size: u32_t,
    pub position: Point,
    pub quaternion: Quaternion,
}
#[test]
fn bindgen_test_layout_Pose() {
    const UNINIT: ::std::mem::MaybeUninit<Pose> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Pose>(),
        128usize,
        concat!("Size of: ", stringify!(Pose))
    );
    assert_eq!(
        ::std::mem::align_of::<Pose>(),
        8usize,
        concat!("Alignment of ", stringify!(Pose))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Pose),
            "::",
            stringify!(type_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Pose),
            "::",
            stringify!(base_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Pose),
            "::",
            stringify!(buffer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).full_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Pose),
            "::",
            stringify!(full_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).position) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Pose),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quaternion) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Pose),
            "::",
            stringify!(quaternion)
        )
    );
}
pub type Pose_ptr = *mut Pose;
extern "C" {
    pub fn Pose_create() -> Pose;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PoseStamped {
    pub type_name: *mut ::std::os::raw::c_char,
    pub base_size: u32_t,
    pub buffer_size: u32_t,
    pub full_size: u32_t,
    pub frame_id: [::std::os::raw::c_char; 50usize],
    pub stamp: u64_t,
    pub position: Point,
    pub quaternion: Quaternion,
}
#[test]
fn bindgen_test_layout_PoseStamped() {
    const UNINIT: ::std::mem::MaybeUninit<PoseStamped> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PoseStamped>(),
        184usize,
        concat!("Size of: ", stringify!(PoseStamped))
    );
    assert_eq!(
        ::std::mem::align_of::<PoseStamped>(),
        8usize,
        concat!("Alignment of ", stringify!(PoseStamped))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PoseStamped),
            "::",
            stringify!(type_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PoseStamped),
            "::",
            stringify!(base_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(PoseStamped),
            "::",
            stringify!(buffer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).full_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PoseStamped),
            "::",
            stringify!(full_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_id) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(PoseStamped),
            "::",
            stringify!(frame_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stamp) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(PoseStamped),
            "::",
            stringify!(stamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).position) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(PoseStamped),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quaternion) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(PoseStamped),
            "::",
            stringify!(quaternion)
        )
    );
}
pub type PoseStamped_ptr = *mut PoseStamped;
extern "C" {
    pub fn PoseStamped_create() -> PoseStamped;
}
extern "C" {
    pub fn PoseStamped_alloc(cfg: *const ta_cfg_t) -> PoseStamped_ptr;
}
extern "C" {
    pub fn PoseStamped_realloc(ptr: PoseStamped_ptr, cfg: *const ta_cfg_t) -> PoseStamped_ptr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Twist {
    pub type_name: *mut ::std::os::raw::c_char,
    pub base_size: u32_t,
    pub buffer_size: u32_t,
    pub full_size: u32_t,
    pub angular: Point,
    pub linear: Point,
}
#[test]
fn bindgen_test_layout_Twist() {
    const UNINIT: ::std::mem::MaybeUninit<Twist> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Twist>(),
        120usize,
        concat!("Size of: ", stringify!(Twist))
    );
    assert_eq!(
        ::std::mem::align_of::<Twist>(),
        8usize,
        concat!("Alignment of ", stringify!(Twist))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Twist),
            "::",
            stringify!(type_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Twist),
            "::",
            stringify!(base_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Twist),
            "::",
            stringify!(buffer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).full_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Twist),
            "::",
            stringify!(full_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).angular) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Twist),
            "::",
            stringify!(angular)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linear) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Twist),
            "::",
            stringify!(linear)
        )
    );
}
pub type Twist_ptr = *mut Twist;
extern "C" {
    pub fn Twist_create() -> Twist;
}
extern "C" {
    pub fn Twist_alloc(cfg: *const ta_cfg_t) -> Twist_ptr;
}
extern "C" {
    pub fn Twist_realloc(ptr: Twist_ptr, cfg: *const ta_cfg_t) -> Twist_ptr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UInt8MultiArray {
    pub type_name: *mut ::std::os::raw::c_char,
    pub base_size: u32_t,
    pub buffer_size: u32_t,
    pub full_size: u32_t,
    pub element_size: u32_t,
    pub buffer: [u8_t; 1usize],
}
#[test]
fn bindgen_test_layout_UInt8MultiArray() {
    const UNINIT: ::std::mem::MaybeUninit<UInt8MultiArray> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UInt8MultiArray>(),
        32usize,
        concat!("Size of: ", stringify!(UInt8MultiArray))
    );
    assert_eq!(
        ::std::mem::align_of::<UInt8MultiArray>(),
        8usize,
        concat!("Alignment of ", stringify!(UInt8MultiArray))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UInt8MultiArray),
            "::",
            stringify!(type_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UInt8MultiArray),
            "::",
            stringify!(base_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(UInt8MultiArray),
            "::",
            stringify!(buffer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).full_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(UInt8MultiArray),
            "::",
            stringify!(full_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).element_size) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(UInt8MultiArray),
            "::",
            stringify!(element_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(UInt8MultiArray),
            "::",
            stringify!(buffer)
        )
    );
}
pub type UInt8MultiArray_ptr = *mut UInt8MultiArray;
extern "C" {
    pub fn UInt8MultiArray_create() -> UInt8MultiArray;
}
extern "C" {
    pub fn UInt8MultiArray_alloc(size: u32_t, cfg: *const ta_cfg_t) -> UInt8MultiArray_ptr;
}
extern "C" {
    pub fn UInt8MultiArray_realloc(
        size: u32_t,
        ptr: UInt8MultiArray_ptr,
        cfg: *const ta_cfg_t,
    ) -> UInt8MultiArray_ptr;
}
extern "C" {
    pub fn UInt8MultiArrayT_set_buffer(t: UInt8MultiArray_ptr, size: u32_t);
}
extern "C" {
    pub fn UInt8MultiArrayT_get_buffer(t: UInt8MultiArray_ptr) -> *mut u8_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UInt16MultiArray {
    pub type_name: *mut ::std::os::raw::c_char,
    pub base_size: u32_t,
    pub buffer_size: u32_t,
    pub full_size: u32_t,
    pub element_size: u32_t,
    pub buffer: [u16_t; 1usize],
}
#[test]
fn bindgen_test_layout_UInt16MultiArray() {
    const UNINIT: ::std::mem::MaybeUninit<UInt16MultiArray> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UInt16MultiArray>(),
        32usize,
        concat!("Size of: ", stringify!(UInt16MultiArray))
    );
    assert_eq!(
        ::std::mem::align_of::<UInt16MultiArray>(),
        8usize,
        concat!("Alignment of ", stringify!(UInt16MultiArray))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UInt16MultiArray),
            "::",
            stringify!(type_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UInt16MultiArray),
            "::",
            stringify!(base_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(UInt16MultiArray),
            "::",
            stringify!(buffer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).full_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(UInt16MultiArray),
            "::",
            stringify!(full_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).element_size) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(UInt16MultiArray),
            "::",
            stringify!(element_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(UInt16MultiArray),
            "::",
            stringify!(buffer)
        )
    );
}
pub type UInt16MultiArray_ptr = *mut UInt16MultiArray;
extern "C" {
    pub fn UInt16MultiArray_create() -> UInt16MultiArray;
}
extern "C" {
    pub fn UInt16MultiArray_alloc(size: u32_t, cfg: *const ta_cfg_t) -> UInt16MultiArray_ptr;
}
extern "C" {
    pub fn UInt16MultiArray_realloc(
        size: u32_t,
        ptr: UInt16MultiArray_ptr,
        cfg: *const ta_cfg_t,
    ) -> UInt16MultiArray_ptr;
}
extern "C" {
    pub fn UInt16MultiArray_set_buffer(t: UInt16MultiArray_ptr, size: u32_t);
}
extern "C" {
    pub fn UInt16MultiArray_get_buffer(t: UInt16MultiArray_ptr) -> *mut u16_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Odometry {
    pub type_name: *mut ::std::os::raw::c_char,
    pub base_size: u32_t,
    pub buffer_size: u32_t,
    pub full_size: u32_t,
    pub frame_id: [::std::os::raw::c_char; 50usize],
    pub child_frame_id: [::std::os::raw::c_char; 50usize],
    pub stamp: u64_t,
    pub pose: Pose,
    pub pose_cov: [f64_t; 36usize],
    pub twist: Twist,
    pub twist_cov: [f64_t; 36usize],
}
#[test]
fn bindgen_test_layout_Odometry() {
    const UNINIT: ::std::mem::MaybeUninit<Odometry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Odometry>(),
        952usize,
        concat!("Size of: ", stringify!(Odometry))
    );
    assert_eq!(
        ::std::mem::align_of::<Odometry>(),
        8usize,
        concat!("Alignment of ", stringify!(Odometry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Odometry),
            "::",
            stringify!(type_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Odometry),
            "::",
            stringify!(base_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Odometry),
            "::",
            stringify!(buffer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).full_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Odometry),
            "::",
            stringify!(full_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_id) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Odometry),
            "::",
            stringify!(frame_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).child_frame_id) as usize - ptr as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(Odometry),
            "::",
            stringify!(child_frame_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stamp) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Odometry),
            "::",
            stringify!(stamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pose) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Odometry),
            "::",
            stringify!(pose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pose_cov) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(Odometry),
            "::",
            stringify!(pose_cov)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).twist) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(Odometry),
            "::",
            stringify!(twist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).twist_cov) as usize - ptr as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(Odometry),
            "::",
            stringify!(twist_cov)
        )
    );
}
pub type Odometry_ptr = *mut Odometry;
extern "C" {
    pub fn Odometry_create() -> Odometry;
}
extern "C" {
    pub fn Odometry_alloc(cfg: *const ta_cfg_t) -> Odometry_ptr;
}
extern "C" {
    pub fn Odometry_realloc(ptr: Odometry_ptr, cfg: *const ta_cfg_t) -> Odometry_ptr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Path {
    pub type_name: *mut ::std::os::raw::c_char,
    pub base_size: u32_t,
    pub buffer_size: u32_t,
    pub full_size: u32_t,
    pub frame_id: [::std::os::raw::c_char; 50usize],
    pub stamp: u64_t,
    pub element_size: u32_t,
    pub data: [PoseStamped; 1usize],
}
#[test]
fn bindgen_test_layout_Path() {
    const UNINIT: ::std::mem::MaybeUninit<Path> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Path>(),
        272usize,
        concat!("Size of: ", stringify!(Path))
    );
    assert_eq!(
        ::std::mem::align_of::<Path>(),
        8usize,
        concat!("Alignment of ", stringify!(Path))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Path),
            "::",
            stringify!(type_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Path),
            "::",
            stringify!(base_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Path),
            "::",
            stringify!(buffer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).full_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Path),
            "::",
            stringify!(full_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_id) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Path),
            "::",
            stringify!(frame_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stamp) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Path),
            "::",
            stringify!(stamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).element_size) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Path),
            "::",
            stringify!(element_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Path),
            "::",
            stringify!(data)
        )
    );
}
pub type Path_ptr = *mut Path;
extern "C" {
    pub fn Path_create() -> Path;
}
extern "C" {
    pub fn Path_alloc(size: u32_t, cfg: *const ta_cfg_t) -> Path_ptr;
}
extern "C" {
    pub fn Path_realloc(size: u32_t, ptr: Path_ptr, cfg: *const ta_cfg_t) -> Path_ptr;
}
extern "C" {
    pub fn Path_set_buffer(t: Path_ptr, size: u32_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HeaderString {
    pub type_name: *mut ::std::os::raw::c_char,
    pub base_size: u32_t,
    pub buffer_size: u32_t,
    pub full_size: u32_t,
    pub frame_id: [::std::os::raw::c_char; 50usize],
    pub stamp: u64_t,
    pub element_size: u32_t,
    pub data: [::std::os::raw::c_char; 1usize],
}
#[test]
fn bindgen_test_layout_HeaderString() {
    const UNINIT: ::std::mem::MaybeUninit<HeaderString> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<HeaderString>(),
        88usize,
        concat!("Size of: ", stringify!(HeaderString))
    );
    assert_eq!(
        ::std::mem::align_of::<HeaderString>(),
        8usize,
        concat!("Alignment of ", stringify!(HeaderString))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HeaderString),
            "::",
            stringify!(type_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(HeaderString),
            "::",
            stringify!(base_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(HeaderString),
            "::",
            stringify!(buffer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).full_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(HeaderString),
            "::",
            stringify!(full_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_id) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(HeaderString),
            "::",
            stringify!(frame_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stamp) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(HeaderString),
            "::",
            stringify!(stamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).element_size) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(HeaderString),
            "::",
            stringify!(element_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(HeaderString),
            "::",
            stringify!(data)
        )
    );
}
pub type HeaderString_ptr = *mut HeaderString;
extern "C" {
    pub fn HeaderString_create() -> HeaderString;
}
extern "C" {
    pub fn HeaderString_alloc(size: u32_t, cfg: *const ta_cfg_t) -> HeaderString_ptr;
}
extern "C" {
    pub fn HeaderString_realloc(
        size: u32_t,
        ptr: HeaderString_ptr,
        cfg: *const ta_cfg_t,
    ) -> HeaderString_ptr;
}
extern "C" {
    pub fn HeaderString_set_buffer(t: HeaderString_ptr, size: u32_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OccupancyGrid {
    pub type_name: *mut ::std::os::raw::c_char,
    pub base_size: u32_t,
    pub buffer_size: u32_t,
    pub full_size: u32_t,
    pub frame_id: [::std::os::raw::c_char; 50usize],
    pub stamp: u64_t,
    pub resolution: f32_t,
    pub width: u32_t,
    pub height: u32_t,
    pub origin: Pose,
    pub data: [i8_t; 1usize],
}
#[test]
fn bindgen_test_layout_OccupancyGrid() {
    const UNINIT: ::std::mem::MaybeUninit<OccupancyGrid> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OccupancyGrid>(),
        232usize,
        concat!("Size of: ", stringify!(OccupancyGrid))
    );
    assert_eq!(
        ::std::mem::align_of::<OccupancyGrid>(),
        8usize,
        concat!("Alignment of ", stringify!(OccupancyGrid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OccupancyGrid),
            "::",
            stringify!(type_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OccupancyGrid),
            "::",
            stringify!(base_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(OccupancyGrid),
            "::",
            stringify!(buffer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).full_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(OccupancyGrid),
            "::",
            stringify!(full_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_id) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(OccupancyGrid),
            "::",
            stringify!(frame_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stamp) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(OccupancyGrid),
            "::",
            stringify!(stamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resolution) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(OccupancyGrid),
            "::",
            stringify!(resolution)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(OccupancyGrid),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(OccupancyGrid),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).origin) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(OccupancyGrid),
            "::",
            stringify!(origin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(OccupancyGrid),
            "::",
            stringify!(data)
        )
    );
}
pub type OccupancyGrid_ptr = *mut OccupancyGrid;
extern "C" {
    pub fn OccupancyGrid_create() -> OccupancyGrid;
}
extern "C" {
    pub fn OccupancyGrid_alloc(
        width: u32_t,
        height: u32_t,
        cfg: *const ta_cfg_t,
    ) -> OccupancyGrid_ptr;
}
extern "C" {
    pub fn OccupancyGrid_realloc(
        width: u32_t,
        height: u32_t,
        ptr: OccupancyGrid_ptr,
        cfg: *const ta_cfg_t,
    ) -> OccupancyGrid_ptr;
}
extern "C" {
    pub fn OccupancyGrid_set_buffer(t: OccupancyGrid_ptr, width: u32_t, height: u32_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LaserScan {
    pub type_name: *mut ::std::os::raw::c_char,
    pub base_size: u32_t,
    pub buffer_size: u32_t,
    pub full_size: u32_t,
    pub frame_id: [::std::os::raw::c_char; 50usize],
    pub stamp: u64_t,
    pub range_min: f32_t,
    pub range_max: f32_t,
    pub angle_min: f32_t,
    pub angle_max: f32_t,
    pub angle_increment: f32_t,
    pub ranges_size: u32_t,
    pub buffer: [f32_t; 1usize],
}
#[test]
fn bindgen_test_layout_LaserScan() {
    const UNINIT: ::std::mem::MaybeUninit<LaserScan> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<LaserScan>(),
        112usize,
        concat!("Size of: ", stringify!(LaserScan))
    );
    assert_eq!(
        ::std::mem::align_of::<LaserScan>(),
        8usize,
        concat!("Alignment of ", stringify!(LaserScan))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LaserScan),
            "::",
            stringify!(type_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LaserScan),
            "::",
            stringify!(base_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(LaserScan),
            "::",
            stringify!(buffer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).full_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(LaserScan),
            "::",
            stringify!(full_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_id) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(LaserScan),
            "::",
            stringify!(frame_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stamp) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(LaserScan),
            "::",
            stringify!(stamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).range_min) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(LaserScan),
            "::",
            stringify!(range_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).range_max) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(LaserScan),
            "::",
            stringify!(range_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).angle_min) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(LaserScan),
            "::",
            stringify!(angle_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).angle_max) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(LaserScan),
            "::",
            stringify!(angle_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).angle_increment) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(LaserScan),
            "::",
            stringify!(angle_increment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ranges_size) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(LaserScan),
            "::",
            stringify!(ranges_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(LaserScan),
            "::",
            stringify!(buffer)
        )
    );
}
pub type LaserScan_ptr = *mut LaserScan;
extern "C" {
    pub fn LaserScan_create() -> LaserScan;
}
extern "C" {
    pub fn LaserScan_set_buffer(t: *mut LaserScan, size: u32_t);
}
extern "C" {
    pub fn LaserScan_alloc(size: u32_t, cfg: *const ta_cfg_t) -> LaserScan_ptr;
}
extern "C" {
    pub fn LaserScan_realloc(
        size: u32_t,
        ptr: LaserScan_ptr,
        cfg: *const ta_cfg_t,
    ) -> LaserScan_ptr;
}
extern "C" {
    pub fn LaserScan_get_ranges(t: *mut LaserScan) -> *mut f32_t;
}
extern "C" {
    pub fn LaserScan_get_intensities(t: *mut LaserScan) -> *mut f32_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PointCloud2 {
    pub type_name: *mut ::std::os::raw::c_char,
    pub base_size: u32_t,
    pub buffer_size: u32_t,
    pub full_size: u32_t,
    pub frame_id: [::std::os::raw::c_char; 50usize],
    pub stamp: u64_t,
    pub height: u32_t,
    pub width: u32_t,
    pub channel: u32_t,
    pub is_dense: bool,
    pub buffer: [f32_t; 1usize],
}
#[test]
fn bindgen_test_layout_PointCloud2() {
    const UNINIT: ::std::mem::MaybeUninit<PointCloud2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PointCloud2>(),
        104usize,
        concat!("Size of: ", stringify!(PointCloud2))
    );
    assert_eq!(
        ::std::mem::align_of::<PointCloud2>(),
        8usize,
        concat!("Alignment of ", stringify!(PointCloud2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PointCloud2),
            "::",
            stringify!(type_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PointCloud2),
            "::",
            stringify!(base_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(PointCloud2),
            "::",
            stringify!(buffer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).full_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PointCloud2),
            "::",
            stringify!(full_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_id) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(PointCloud2),
            "::",
            stringify!(frame_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stamp) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(PointCloud2),
            "::",
            stringify!(stamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(PointCloud2),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(PointCloud2),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channel) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(PointCloud2),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_dense) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(PointCloud2),
            "::",
            stringify!(is_dense)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(PointCloud2),
            "::",
            stringify!(buffer)
        )
    );
}
pub type PointCloud2_ptr = *mut PointCloud2;
extern "C" {
    pub fn PointCloud2_create() -> PointCloud2;
}
extern "C" {
    pub fn PointCloud2_set_buffer(t: PointCloud2_ptr, height: u32_t, width: u32_t, channel: u32_t);
}
extern "C" {
    pub fn PointCloud2_alloc(
        height: u32_t,
        width: u32_t,
        channel: u32_t,
        cfg: *const ta_cfg_t,
    ) -> PointCloud2_ptr;
}
extern "C" {
    pub fn PointCloud2_realloc(
        height: u32_t,
        width: u32_t,
        channel: u32_t,
        ptr: PointCloud2_ptr,
        cfg: *const ta_cfg_t,
    ) -> PointCloud2_ptr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Scalar {
    pub stamp: u64_t,
    pub name: [::std::os::raw::c_char; 50usize],
    pub value: f32_t,
}
#[test]
fn bindgen_test_layout_Scalar() {
    const UNINIT: ::std::mem::MaybeUninit<Scalar> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Scalar>(),
        64usize,
        concat!("Size of: ", stringify!(Scalar))
    );
    assert_eq!(
        ::std::mem::align_of::<Scalar>(),
        8usize,
        concat!("Alignment of ", stringify!(Scalar))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stamp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Scalar),
            "::",
            stringify!(stamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Scalar),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(Scalar),
            "::",
            stringify!(value)
        )
    );
}
pub type ScalarPtr = *mut Scalar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ScalarList {
    pub type_name: *mut ::std::os::raw::c_char,
    pub base_size: u32_t,
    pub buffer_size: u32_t,
    pub full_size: u32_t,
    pub size: u32_t,
    pub data: [Scalar; 1usize],
}
#[test]
fn bindgen_test_layout_ScalarList() {
    const UNINIT: ::std::mem::MaybeUninit<ScalarList> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ScalarList>(),
        88usize,
        concat!("Size of: ", stringify!(ScalarList))
    );
    assert_eq!(
        ::std::mem::align_of::<ScalarList>(),
        8usize,
        concat!("Alignment of ", stringify!(ScalarList))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ScalarList),
            "::",
            stringify!(type_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ScalarList),
            "::",
            stringify!(base_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ScalarList),
            "::",
            stringify!(buffer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).full_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ScalarList),
            "::",
            stringify!(full_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ScalarList),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ScalarList),
            "::",
            stringify!(data)
        )
    );
}
pub type ScalarList_ptr = *mut ScalarList;
extern "C" {
    pub fn ScalarList_create() -> ScalarList;
}
extern "C" {
    pub fn ScalarList_set_buffer(t: ScalarList_ptr, size: u32_t);
}
extern "C" {
    pub fn ScalarList_alloc(size: u32_t, cfg: *const ta_cfg_t) -> ScalarList_ptr;
}
extern "C" {
    pub fn ScalarList_realloc(
        size: u32_t,
        ptr: ScalarList_ptr,
        cfg: *const ta_cfg_t,
    ) -> ScalarList_ptr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Signal {
    pub name: [::std::os::raw::c_char; 50usize],
    pub value: bool,
}
#[test]
fn bindgen_test_layout_Signal() {
    const UNINIT: ::std::mem::MaybeUninit<Signal> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Signal>(),
        51usize,
        concat!("Size of: ", stringify!(Signal))
    );
    assert_eq!(
        ::std::mem::align_of::<Signal>(),
        1usize,
        concat!("Alignment of ", stringify!(Signal))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Signal),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(Signal),
            "::",
            stringify!(value)
        )
    );
}
pub type Signal_ptr = *mut Signal;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SignalList {
    pub type_name: *mut ::std::os::raw::c_char,
    pub base_size: u32_t,
    pub buffer_size: u32_t,
    pub full_size: u32_t,
    pub size: u32_t,
    pub data: [Signal; 1usize],
}
#[test]
fn bindgen_test_layout_SignalList() {
    const UNINIT: ::std::mem::MaybeUninit<SignalList> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SignalList>(),
        80usize,
        concat!("Size of: ", stringify!(SignalList))
    );
    assert_eq!(
        ::std::mem::align_of::<SignalList>(),
        8usize,
        concat!("Alignment of ", stringify!(SignalList))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SignalList),
            "::",
            stringify!(type_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SignalList),
            "::",
            stringify!(base_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SignalList),
            "::",
            stringify!(buffer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).full_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SignalList),
            "::",
            stringify!(full_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SignalList),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SignalList),
            "::",
            stringify!(data)
        )
    );
}
pub type SignalList_ptr = *mut SignalList;
extern "C" {
    pub fn SignalList_create() -> SignalList;
}
extern "C" {
    pub fn SignalList_set_buffer(t: SignalList_ptr, size: u32_t);
}
extern "C" {
    pub fn SignalList_alloc(size: u32_t, cfg: *const ta_cfg_t) -> SignalList_ptr;
}
extern "C" {
    pub fn SignalList_realloc(
        size: u32_t,
        ptr: SignalList_ptr,
        cfg: *const ta_cfg_t,
    ) -> SignalList_ptr;
}
extern "C" {
    pub fn tcc_build() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn tcc_drop(tcc: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcc_compile(
        tcc: *mut ::std::os::raw::c_void,
        code: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcc_output(tcc: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcc_get(
        tcc: *mut ::std::os::raw::c_void,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn tcc_add(
        tcc: *mut ::std::os::raw::c_void,
        name: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pointcloud_clip(
        src_buffer: *mut f32,
        height: u64_t,
        width: u64_t,
        dst_buffer: *mut f32,
        filter_height_min: u64_t,
        filter_height_max: u64_t,
        filter_width_min: u64_t,
        filter_width_max: u64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pointcloud_transform(
        src_buffer: *mut f32,
        point_num: u64_t,
        dst_buffer: *mut f32,
        tx: f32_t,
        ty: f32_t,
        tz: f32_t,
        roll: f32_t,
        pitch: f32_t,
        yaw: f32_t,
    ) -> ::std::os::raw::c_int;
}
